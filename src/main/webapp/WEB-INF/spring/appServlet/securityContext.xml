<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">
    
    <!-- 검사 URL -->
    <http use-expressions="true">
    
    	<!--  세션이 풀릴 경우 가게되는 url-->
		<session-management invalid-session-url="/main">
			<concurrency-control max-sessions="1"
								 expired-url="/login/loginForm" 	
								 error-if-maximum-exceeded="true" />					 
		</session-management>  
		
    	<!-- iframe 안되는걸 방지 -->
    	<headers>
    		<frame-options policy="SAMEORIGIN"/>
    	</headers>	
    	<intercept-url pattern="/qna/**" access="hasAnyRole('USER','ADMIN' )" />
        <intercept-url pattern="/user/**" access="hasRole('USER')" />
        <intercept-url pattern="/admin/**" access="hasRole('ADMIN')" />
        <intercept-url pattern="/block/**" access="hasRole('BLOCK')" />
        <intercept-url pattern="/login/loginForm" access="permitAll" />
        <intercept-url pattern="/main" access="permitAll" />
        <intercept-url pattern="/**" access="permitAll" />
        
        <!--로그인 설정   -->
        <form-login login-page="/login/loginForm"
                    default-target-url="/main"
                    authentication-failure-url="/login/loginForm?error"
                    username-parameter="id"
                    password-parameter="password" />
  
        <!-- 로그아웃 설정   -->
        <logout logout-url="/logout"
                logout-success-url="/main"
                invalidate-session="true"/>
                
        <access-denied-handler error-page="/login/accessDenied" />
        <csrf disabled="true" />
	      
    </http>
    
    <!--db 연동 설정  -->
    <beans:bean id="userDetailsService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
        <beans:property name="dataSource" ref="dataSource"/>
    </beans:bean>
    
    <!-- BCryptPasswordEncoder 클래스 빈 추가  -->
	<beans:bean id="bcryptPasswordEncoder" 
	             class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
    <authentication-manager>
    
    <!-- db연동설정  -->
    	<authentication-provider user-service-ref="securityService">
    		<!-- 로그인 시 비밀번호를 암호화해서 DB에서 조회한 비밀번호와 비교  -->
    			<password-encoder ref="bcryptPasswordEncoder" />
    	</authentication-provider>
    </authentication-manager>
    
    <!-- class부분은 사용자가 구현한 클래스 부분이다. -->
    <beans:bean id="securityService" class="com.kh.onsu.member.model.jdbc.UserJdbcDaoImpl">
    	<beans:property name="dataSource" ref="dataSource" />
    	<beans:property name="rolePrefix" value="" />
		<beans:property name="usersByUsernameQuery">
				<!-- 사용자 인증정보  -->
				<beans:value>
				SELECT MEMBER_ID, MEMBER_PW, enabled
				FROM J_MEMBER
				WHERE MEMBER_ID = ?
				</beans:value>
		</beans:property>
    	<beans:property name="authoritiesByUsernameQuery">
    			<!--사용자 권한 정보  -->
    		<beans:value>
    			SELECT MEMBER_ID, authority
    			FROM J_authorities
    			WHERE MEMBER_ID = ?
    		</beans:value>
    	</beans:property>
    	<beans:property name="enableGroups" value="false"/>
    </beans:bean>
   
</beans:beans>